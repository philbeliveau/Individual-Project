{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c0c9959c",
   "metadata": {},
   "outputs": [],
   "source": [
    "!kaggle competitions download -c data-h-m1-challenge-final"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28feb277",
   "metadata": {},
   "source": [
    "# Importing package and data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "741cc312",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns; sns.set()\n",
    "import numpy as np \n",
    "\n",
    "# Chart drawing\n",
    "import plotly as py\n",
    "import plotly.io as pio\n",
    "import plotly.graph_objects as go\n",
    "from plotly.subplots import make_subplots\n",
    "from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5ce2f611",
   "metadata": {},
   "outputs": [],
   "source": [
    "import warnings\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import copy\n",
    "from pathlib import Path\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "\n",
    "import pytorch_lightning as pl\n",
    "from pytorch_lightning.callbacks import EarlyStopping, LearningRateMonitor\n",
    "from pytorch_lightning.loggers import TensorBoardLogger\n",
    "\n",
    "import pytorch_forecasting\n",
    "from pytorch_forecasting import Baseline, TemporalFusionTransformer, TimeSeriesDataSet\n",
    "from pytorch_forecasting.data import GroupNormalizer\n",
    "from pytorch_forecasting.metrics import SMAPE, PoissonLoss, QuantileLoss\n",
    "from pytorch_forecasting.models.temporal_fusion_transformer.tuning import optimize_hyperparameters\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "26b1ae4a",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_item=pd.read_csv('/Users/philippebeliveau/Desktop/Data Science Ressources/M1 Final Challenge/data-h-m1-challenge-final/meta-item.csv')\n",
    "df_store=pd.read_csv('/Users/philippebeliveau/Desktop/Data Science Ressources/M1 Final Challenge/data-h-m1-challenge-final/meta-store.csv')\n",
    "df_sales=pd.read_csv('/Users/philippebeliveau/Desktop/Data Science Ressources/M1 Final Challenge/data-h-m1-challenge-final/sales.csv')\n",
    "\n",
    "df_submission=pd.read_csv('/Users/philippebeliveau/Desktop/Data Science Ressources/M1 Final Challenge/data-h-m1-challenge-final/submission_sample.csv')\n",
    "df_submission[['DATE', 'S100', 'I100', 'C100', 'C101']] = df_submission['ID'].str.split('_',expand=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "82a58866",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_sales.DATE = pd.to_datetime(df_sales.DATE)\n",
    "df_submission.DATE = pd.to_datetime(df_submission.DATE)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "145b75e3",
   "metadata": {},
   "source": [
    "# Data Format"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e3fab825",
   "metadata": {},
   "outputs": [],
   "source": [
    "def preprocess(df):\n",
    "    \n",
    "    df[['year', 'month', 'day']] = df['DATE'].str.split('-',expand=True)\n",
    "    \n",
    "    for value in [ 'S100', 'I100', 'C100', 'C101','month', 'year', 'day']:        \n",
    "        df[value] = df[value].astype(str).astype(int)\n",
    "    \n",
    "    df = df.merge(df_item,on=['I100'])\n",
    "    df = df.merge(df_store,on=['S100'])\n",
    "    \n",
    "\n",
    "    df['DATE'] = pd.to_datetime(df['DATE']).dt.strftime('%Y-%m-%d')    \n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7720eb0a",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_sales = preprocess(df_sales)\n",
    "df_submission = preprocess(df_submission)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "13a33fe5",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_sales.DATE = pd.to_datetime(df_sales.DATE)\n",
    "df_submission.DATE = pd.to_datetime(df_submission.DATE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3f560949",
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'df' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-7-f76ee1219a1e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mvalid_size\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0.15\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mtest_split_idx\u001b[0m  \u001b[0;34m=\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mtest_size\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mvalid_split_idx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalid_size\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mtest_size\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'df' is not defined"
     ]
    }
   ],
   "source": [
    "test_size  = 0.15\n",
    "valid_size = 0.15\n",
    "\n",
    "test_split_idx  = int(df.shape[0] * (1-test_size))\n",
    "valid_split_idx = int(df.shape[0] * (1-(valid_size+test_size)))\n",
    "\n",
    "train_df  = df.loc[:valid_split_idx].copy()\n",
    "valid_df  = df.loc[valid_split_idx+1:test_split_idx].copy()\n",
    "test_df   = df.loc[test_split_idx+1:].copy()\n",
    "\n",
    "QTT = df['QTT']\n",
    "fig = go.Figure()\n",
    "fig.add_trace(go.Scatter(x=train_df.index, y=train_df.QTT, name='Training'))\n",
    "fig.add_trace(go.Scatter(x=valid_df.index, y=valid_df.QTT, name='Validation'))\n",
    "fig.add_trace(go.Scatter(x=test_df.index,  y=test_df.QTT,  name='Test'))\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "36e7a06e",
   "metadata": {},
   "source": [
    "# date_block_num"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e83fbad1",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_auxiliar = df_sales.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "06880605",
   "metadata": {},
   "outputs": [],
   "source": [
    "date = df_sales['DATE'].min()\n",
    "maxi = df_submission['DATE'].max()\n",
    "\n",
    "dict_dates = {}\n",
    "idx = 0\n",
    "while(True):    \n",
    "    if date>maxi:\n",
    "        break\n",
    "    dict_dates[date]=idx\n",
    "    date = date+ pd.DateOffset(days=7)    \n",
    "    idx = idx+1\n",
    "\n",
    "df_auxiliar['date_block_num'] = df_auxiliar['DATE'].replace(dict_dates)\n",
    "\n",
    "df_sales['date_block_num'] = df_sales['DATE'].replace(dict_dates)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "ef269444",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>QTT</th>\n",
       "      <th>DATE</th>\n",
       "      <th>S100</th>\n",
       "      <th>I100</th>\n",
       "      <th>C100</th>\n",
       "      <th>C101</th>\n",
       "      <th>year</th>\n",
       "      <th>month</th>\n",
       "      <th>day</th>\n",
       "      <th>I101</th>\n",
       "      <th>I102</th>\n",
       "      <th>I103</th>\n",
       "      <th>S101</th>\n",
       "      <th>S102</th>\n",
       "      <th>S103</th>\n",
       "      <th>date_block_num</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2021-10-03_0_1_12_140</td>\n",
       "      <td>-1</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>140</td>\n",
       "      <td>2021</td>\n",
       "      <td>10</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>17</td>\n",
       "      <td>10</td>\n",
       "      <td>247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021-10-03_0_1_12_164</td>\n",
       "      <td>-1</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>164</td>\n",
       "      <td>2021</td>\n",
       "      <td>10</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>17</td>\n",
       "      <td>10</td>\n",
       "      <td>247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2021-10-03_0_1_12_339</td>\n",
       "      <td>-1</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>339</td>\n",
       "      <td>2021</td>\n",
       "      <td>10</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>17</td>\n",
       "      <td>10</td>\n",
       "      <td>247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2021-10-03_0_1_13_128</td>\n",
       "      <td>-1</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>13</td>\n",
       "      <td>128</td>\n",
       "      <td>2021</td>\n",
       "      <td>10</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>17</td>\n",
       "      <td>10</td>\n",
       "      <td>247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2021-10-03_0_1_14_164</td>\n",
       "      <td>-1</td>\n",
       "      <td>2021-10-03</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>14</td>\n",
       "      <td>164</td>\n",
       "      <td>2021</td>\n",
       "      <td>10</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>17</td>\n",
       "      <td>10</td>\n",
       "      <td>247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>69116</th>\n",
       "      <td>2021-10-24_22_18_13_76</td>\n",
       "      <td>-1</td>\n",
       "      <td>2021-10-24</td>\n",
       "      <td>22</td>\n",
       "      <td>18</td>\n",
       "      <td>13</td>\n",
       "      <td>76</td>\n",
       "      <td>2021</td>\n",
       "      <td>10</td>\n",
       "      <td>24</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>69117</th>\n",
       "      <td>2021-11-07_22_18_12_76</td>\n",
       "      <td>-1</td>\n",
       "      <td>2021-11-07</td>\n",
       "      <td>22</td>\n",
       "      <td>18</td>\n",
       "      <td>12</td>\n",
       "      <td>76</td>\n",
       "      <td>2021</td>\n",
       "      <td>11</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>252</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>69118</th>\n",
       "      <td>2021-11-07_22_18_13_76</td>\n",
       "      <td>-1</td>\n",
       "      <td>2021-11-07</td>\n",
       "      <td>22</td>\n",
       "      <td>18</td>\n",
       "      <td>13</td>\n",
       "      <td>76</td>\n",
       "      <td>2021</td>\n",
       "      <td>11</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>252</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>69119</th>\n",
       "      <td>2021-10-17_22_12_15_79</td>\n",
       "      <td>-1</td>\n",
       "      <td>2021-10-17</td>\n",
       "      <td>22</td>\n",
       "      <td>12</td>\n",
       "      <td>15</td>\n",
       "      <td>79</td>\n",
       "      <td>2021</td>\n",
       "      <td>10</td>\n",
       "      <td>17</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>249</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>69120</th>\n",
       "      <td>2021-11-07_22_12_15_79</td>\n",
       "      <td>-1</td>\n",
       "      <td>2021-11-07</td>\n",
       "      <td>22</td>\n",
       "      <td>12</td>\n",
       "      <td>15</td>\n",
       "      <td>79</td>\n",
       "      <td>2021</td>\n",
       "      <td>11</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>252</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>69121 rows × 17 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                           ID  QTT       DATE  S100  I100  C100  C101  year  \\\n",
       "0       2021-10-03_0_1_12_140   -1 2021-10-03     0     1    12   140  2021   \n",
       "1       2021-10-03_0_1_12_164   -1 2021-10-03     0     1    12   164  2021   \n",
       "2       2021-10-03_0_1_12_339   -1 2021-10-03     0     1    12   339  2021   \n",
       "3       2021-10-03_0_1_13_128   -1 2021-10-03     0     1    13   128  2021   \n",
       "4       2021-10-03_0_1_14_164   -1 2021-10-03     0     1    14   164  2021   \n",
       "...                       ...  ...        ...   ...   ...   ...   ...   ...   \n",
       "69116  2021-10-24_22_18_13_76   -1 2021-10-24    22    18    13    76  2021   \n",
       "69117  2021-11-07_22_18_12_76   -1 2021-11-07    22    18    12    76  2021   \n",
       "69118  2021-11-07_22_18_13_76   -1 2021-11-07    22    18    13    76  2021   \n",
       "69119  2021-10-17_22_12_15_79   -1 2021-10-17    22    12    15    79  2021   \n",
       "69120  2021-11-07_22_12_15_79   -1 2021-11-07    22    12    15    79  2021   \n",
       "\n",
       "       month  day  I101  I102  I103  S101  S102  S103  date_block_num  \n",
       "0         10    3     2     1     1     1    17    10             247  \n",
       "1         10    3     2     1     1     1    17    10             247  \n",
       "2         10    3     2     1     1     1    17    10             247  \n",
       "3         10    3     2     1     1     1    17    10             247  \n",
       "4         10    3     2     1     1     1    17    10             247  \n",
       "...      ...  ...   ...   ...   ...   ...   ...   ...             ...  \n",
       "69116     10   24     2     1     2     0     0    10             250  \n",
       "69117     11    7     2     1     2     0     0    10             252  \n",
       "69118     11    7     2     1     2     0     0    10             252  \n",
       "69119     10   17     2     1     2     0     0    10             249  \n",
       "69120     11    7     2     1     2     0     0    10             252  \n",
       "\n",
       "[69121 rows x 17 columns]"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_submission['date_block_num'] = df_submission['DATE'].replace(dict_dates)\n",
    "df_submission"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1789eb7c",
   "metadata": {},
   "source": [
    "#### Submission"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "c1834afa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>I100</th>\n",
       "      <th>S100</th>\n",
       "      <th>date_block_num</th>\n",
       "      <th>QTT_week</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>247</td>\n",
       "      <td>-10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>248</td>\n",
       "      <td>-12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>249</td>\n",
       "      <td>-18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>250</td>\n",
       "      <td>-12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>251</td>\n",
       "      <td>-9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12764</th>\n",
       "      <td>95</td>\n",
       "      <td>29</td>\n",
       "      <td>249</td>\n",
       "      <td>-3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12765</th>\n",
       "      <td>95</td>\n",
       "      <td>29</td>\n",
       "      <td>250</td>\n",
       "      <td>-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12766</th>\n",
       "      <td>95</td>\n",
       "      <td>29</td>\n",
       "      <td>251</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12767</th>\n",
       "      <td>95</td>\n",
       "      <td>29</td>\n",
       "      <td>252</td>\n",
       "      <td>-3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12768</th>\n",
       "      <td>95</td>\n",
       "      <td>29</td>\n",
       "      <td>253</td>\n",
       "      <td>-3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>12769 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       I100  S100  date_block_num  QTT_week\n",
       "0         1     0             247       -10\n",
       "1         1     0             248       -12\n",
       "2         1     0             249       -18\n",
       "3         1     0             250       -12\n",
       "4         1     0             251        -9\n",
       "...     ...   ...             ...       ...\n",
       "12764    95    29             249        -3\n",
       "12765    95    29             250        -2\n",
       "12766    95    29             251        -1\n",
       "12767    95    29             252        -3\n",
       "12768    95    29             253        -3\n",
       "\n",
       "[12769 rows x 4 columns]"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test = df_submission.copy()\n",
    "\n",
    "df_test = df_test.groupby([\"I100\",\"S100\",\"date_block_num\"]).sum().reset_index()\n",
    "\n",
    "df_test = df_test.rename(index=str, columns = {\"QTT\":\"QTT_week\"})\n",
    "df_test = df_test[[\"I100\",\"S100\",\"date_block_num\",\"QTT_week\"]]\n",
    "df_test"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e4ee35e0",
   "metadata": {},
   "source": [
    "#### Train "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "e8bc7c7e",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>I100</th>\n",
       "      <th>S100</th>\n",
       "      <th>date_block_num</th>\n",
       "      <th>QTT_week</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>496822</th>\n",
       "      <td>95</td>\n",
       "      <td>30</td>\n",
       "      <td>160</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>496823</th>\n",
       "      <td>95</td>\n",
       "      <td>30</td>\n",
       "      <td>161</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>496824</th>\n",
       "      <td>95</td>\n",
       "      <td>30</td>\n",
       "      <td>162</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>496825</th>\n",
       "      <td>95</td>\n",
       "      <td>30</td>\n",
       "      <td>164</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>496826</th>\n",
       "      <td>95</td>\n",
       "      <td>30</td>\n",
       "      <td>166</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>496827 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        I100  S100  date_block_num  QTT_week\n",
       "0          0     0               0        18\n",
       "1          0     0               1        11\n",
       "2          0     0               2        10\n",
       "3          0     0               3         9\n",
       "4          0     0               4        19\n",
       "...      ...   ...             ...       ...\n",
       "496822    95    30             160         2\n",
       "496823    95    30             161         2\n",
       "496824    95    30             162         1\n",
       "496825    95    30             164         1\n",
       "496826    95    30             166         1\n",
       "\n",
       "[496827 rows x 4 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train = df_sales.copy()\n",
    "\n",
    "df_train = df_train.groupby([\"I100\",\"S100\",\"date_block_num\"]).sum().reset_index()\n",
    "\n",
    "df_train = df_train.rename(index=str, columns = {\"QTT\":\"QTT_week\"})\n",
    "df_train = df_train[[\"I100\",\"S100\",\"date_block_num\",\"QTT_week\"]]\n",
    "df_train"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6393d2c1",
   "metadata": {},
   "source": [
    "Are we not losing information here? "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5392d425",
   "metadata": {},
   "source": [
    "# Time series Data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d3a7454",
   "metadata": {},
   "source": [
    "### df_sales"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0bda89db",
   "metadata": {},
   "outputs": [],
   "source": [
    "max_prediction_length = 1\n",
    "max_encoder_length = 27\n",
    "training_cutoff = df_train['date_block_num'].max() - max_prediction_length\n",
    "\n",
    "training = TimeSeriesDataSet(\n",
    "    df_train[lambda x: x['date_block_num'] <= training_cutoff],\n",
    "    time_idx='date_block_num',\n",
    "    target=\"QTT\",\n",
    "    group_ids=[\"S100\", \"I100\"],\n",
    "    min_encoder_length=0,  \n",
    "    max_encoder_length=max_encoder_length,\n",
    "    min_prediction_length=1,\n",
    "    max_prediction_length=max_prediction_length,\n",
    "    static_categoricals=[],\n",
    "    static_reals=[\"S100\", \"I100\"],\n",
    "    time_varying_known_categoricals=[],  \n",
    "    time_varying_known_reals=['date_block_num'],\n",
    "    time_varying_unknown_categoricals=[],\n",
    "    time_varying_unknown_reals=['date_block_num'],\n",
    "    categorical_encoders={'S100': pytorch_forecasting.data.encoders.NaNLabelEncoder(add_nan=True),'I100':pytorch_forecasting.data.encoders.NaNLabelEncoder(add_nan=True)},\n",
    "    add_relative_time_idx=True,\n",
    "    add_target_scales=True,\n",
    "    add_encoder_length=True,\n",
    "    allow_missing_timesteps=True\n",
    "    \n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4b1944f2",
   "metadata": {},
   "source": [
    "## df_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "3583ad94",
   "metadata": {},
   "outputs": [],
   "source": [
    "max_prediction_length = 1\n",
    "max_encoder_length = 27\n",
    "training_cutoff = df_train['date_block_num'].max() - max_prediction_length\n",
    "\n",
    "training = TimeSeriesDataSet(\n",
    "    df_train[lambda x: x['date_block_num'] <= training_cutoff],\n",
    "    time_idx='date_block_num',\n",
    "    target=\"QTT_week\",\n",
    "    group_ids=[\"S100\", \"I100\"],\n",
    "    min_encoder_length=0,  \n",
    "    max_encoder_length=max_encoder_length,\n",
    "    min_prediction_length=1,\n",
    "    max_prediction_length=max_prediction_length,\n",
    "    static_categoricals=[],\n",
    "    static_reals=[\"S100\", \"I100\"],\n",
    "    time_varying_known_categoricals=[],  \n",
    "    time_varying_known_reals=['date_block_num'],\n",
    "    time_varying_unknown_categoricals=[],\n",
    "    time_varying_unknown_reals=['date_block_num'],\n",
    "    add_relative_time_idx=True,\n",
    "    add_target_scales=True,\n",
    "    add_encoder_length=True,\n",
    "    allow_missing_timesteps=True\n",
    "    \n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d13e961",
   "metadata": {},
   "source": [
    "## df_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "b36a676c",
   "metadata": {},
   "outputs": [],
   "source": [
    "max_prediction_length = 1\n",
    "max_encoder_length = 27\n",
    "test_cutoff = df_test['date_block_num'].max() - max_prediction_length\n",
    "\n",
    "training = TimeSeriesDataSet(\n",
    "    df_test[lambda x: x['date_block_num'] <= test_cutoff],\n",
    "    time_idx='date_block_num',\n",
    "    target=\"QTT_week\",\n",
    "    group_ids=[\"S100\", \"I100\"],\n",
    "    min_encoder_length=0,  \n",
    "    max_encoder_length=max_encoder_length,\n",
    "    min_prediction_length=1,\n",
    "    max_prediction_length=max_prediction_length,\n",
    "    static_categoricals=[],\n",
    "    static_reals=[\"S100\", \"I100\"],\n",
    "    time_varying_known_categoricals=[],  \n",
    "    time_varying_known_reals=['date_block_num'],\n",
    "    time_varying_unknown_categoricals=[],\n",
    "    time_varying_unknown_reals=['date_block_num'],\n",
    "    add_relative_time_idx=True,\n",
    "    add_target_scales=True,\n",
    "    add_encoder_length=True,\n",
    "    allow_missing_timesteps=True\n",
    "    \n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0d4f7a3f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# categorical_encoders={'S100': pytorch_forecasting.data.encoders.TorchNormalizer(),'I100':pytorch_forecasting.data.encoders.TorchNormalizer()},"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8e34c9b9",
   "metadata": {},
   "source": [
    "# Train and validation "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "c0efbfdc",
   "metadata": {},
   "outputs": [],
   "source": [
    "validation = TimeSeriesDataSet.from_dataset(training, df_train, predict=True, stop_randomization=True)\n",
    "\n",
    "batch_size = 128\n",
    "train_dataloader = training.to_dataloader(train=True, batch_size=batch_size, num_workers=0)\n",
    "val_dataloader = validation.to_dataloader(train=False, batch_size=batch_size * 10, num_workers=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "b1b1475d",
   "metadata": {},
   "outputs": [],
   "source": [
    "submission = TimeSeriesDataSet.from_dataset(training, df_test, predict=True, stop_randomization=True)\n",
    "\n",
    "batch_size = 128\n",
    "test_dataloader = training.to_dataloader(train=False, batch_size=batch_size, num_workers=0)\n",
    "submission_dataloader = submission.to_dataloader(train=False, batch_size=batch_size * 10, num_workers=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d337fac",
   "metadata": {},
   "source": [
    "# Define TFT "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "36b101c3",
   "metadata": {},
   "source": [
    "### Without GPUs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "ab4d33b0",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Global seed set to 42\n",
      "GPU available: False, used: False\n",
      "TPU available: False, using: 0 TPU cores\n",
      "IPU available: False, using: 0 IPUs\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of parameters in network: 18.1k\n"
     ]
    }
   ],
   "source": [
    "# configure network and trainer\n",
    "pl.seed_everything(42)\n",
    "trainer = pl.Trainer(\n",
    "    gpus=0,\n",
    "    # clipping gradients is a hyperparameter and important to prevent divergance\n",
    "    # of the gradient for recurrent neural networks\n",
    "    gradient_clip_val=0.1,\n",
    ")\n",
    "\n",
    "\n",
    "tft = TemporalFusionTransformer.from_dataset(\n",
    "    training,\n",
    "    # not meaningful for finding the learning rate but otherwise very important\n",
    "    learning_rate=0.03,\n",
    "    hidden_size=16,  # most important hyperparameter apart from learning rate\n",
    "    # number of attention heads. Set to up to 4 for large datasets\n",
    "    attention_head_size=1,\n",
    "    dropout=0.1,  # between 0.1 and 0.3 are good values\n",
    "    hidden_continuous_size=8,  # set to <= hidden_size\n",
    "    output_size=1,  # 7 quantiles by default\n",
    "    loss=pytorch_forecasting.metrics.RMSE(),\n",
    "    # reduce learning rate if no improvement in validation loss after x epochs\n",
    "    reduce_on_plateau_patience=4,\n",
    ")\n",
    "print(f\"Number of parameters in network: {tft.size()/1e3:.1f}k\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "281832ee",
   "metadata": {},
   "source": [
    "### With GPU"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "210294a9",
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Global seed set to 42\n"
     ]
    },
    {
     "ename": "MisconfigurationException",
     "evalue": "You requested GPUs: [0]\n But your machine only has: []",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mMisconfigurationException\u001b[0m                 Traceback (most recent call last)",
      "\u001b[0;32m/var/folders/dk/39_21_r51vg7j_fkt5p1mh5r0000gn/T/ipykernel_2110/3387122893.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# configure network and trainer\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mpl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mseed_everything\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m42\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m trainer = pl.Trainer(\n\u001b[0m\u001b[1;32m      4\u001b[0m     \u001b[0mgpus\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0;31m# clipping gradients is a hyperparameter and important to prevent divergance\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/Pythorch/lib/python3.8/site-packages/pytorch_lightning/trainer/connectors/env_vars_connector.py\u001b[0m in \u001b[0;36minsert_env_defaults\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m     36\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m         \u001b[0;31m# all args were already moved to kwargs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 38\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     39\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0minsert_env_defaults\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/Pythorch/lib/python3.8/site-packages/pytorch_lightning/trainer/trainer.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, logger, checkpoint_callback, enable_checkpointing, callbacks, default_root_dir, gradient_clip_val, gradient_clip_algorithm, process_position, num_nodes, num_processes, devices, gpus, auto_select_gpus, tpu_cores, ipus, log_gpu_memory, progress_bar_refresh_rate, enable_progress_bar, overfit_batches, track_grad_norm, check_val_every_n_epoch, fast_dev_run, accumulate_grad_batches, max_epochs, min_epochs, max_steps, min_steps, max_time, limit_train_batches, limit_val_batches, limit_test_batches, limit_predict_batches, val_check_interval, flush_logs_every_n_steps, log_every_n_steps, accelerator, strategy, sync_batchnorm, precision, enable_model_summary, weights_summary, weights_save_path, num_sanity_val_steps, resume_from_checkpoint, profiler, benchmark, deterministic, reload_dataloaders_every_n_epochs, reload_dataloaders_every_epoch, auto_lr_find, replace_sampler_ddp, detect_anomaly, auto_scale_batch_size, prepare_data_per_node, plugins, amp_backend, amp_level, move_metrics_to_cpu, multiple_trainloader_mode, stochastic_weight_avg, terminate_on_nan)\u001b[0m\n\u001b[1;32m    424\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstate\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTrainerState\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    425\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 426\u001b[0;31m         \u001b[0mgpu_ids\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtpu_cores\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parse_devices\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgpus\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mauto_select_gpus\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtpu_cores\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    427\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    428\u001b[0m         \u001b[0;31m# init connectors\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/Pythorch/lib/python3.8/site-packages/pytorch_lightning/trainer/trainer.py\u001b[0m in \u001b[0;36m_parse_devices\u001b[0;34m(gpus, auto_select_gpus, tpu_cores)\u001b[0m\n\u001b[1;32m   1541\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1542\u001b[0m         \u001b[0;31m# TODO (@seannaren, @kaushikb11): Include IPU parsing logic here\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1543\u001b[0;31m         \u001b[0mgpu_ids\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdevice_parser\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparse_gpu_ids\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgpus\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1544\u001b[0m         \u001b[0mtpu_cores\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdevice_parser\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparse_tpu_cores\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtpu_cores\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1545\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mgpu_ids\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtpu_cores\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/Pythorch/lib/python3.8/site-packages/pytorch_lightning/utilities/device_parser.py\u001b[0m in \u001b[0;36mparse_gpu_ids\u001b[0;34m(gpus)\u001b[0m\n\u001b[1;32m     87\u001b[0m     \u001b[0m_check_unique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgpus\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     88\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 89\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_sanitize_gpu_ids\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgpus\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     90\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     91\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/Pythorch/lib/python3.8/site-packages/pytorch_lightning/utilities/device_parser.py\u001b[0m in \u001b[0;36m_sanitize_gpu_ids\u001b[0;34m(gpus)\u001b[0m\n\u001b[1;32m    149\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mgpu\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mgpus\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    150\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mgpu\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mall_available_gpus\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 151\u001b[0;31m             raise MisconfigurationException(\n\u001b[0m\u001b[1;32m    152\u001b[0m                 \u001b[0;34mf\"You requested GPUs: {gpus}\\n But your machine only has: {all_available_gpus}\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    153\u001b[0m             )\n",
      "\u001b[0;31mMisconfigurationException\u001b[0m: You requested GPUs: [0]\n But your machine only has: []"
     ]
    }
   ],
   "source": [
    "# configure network and trainer\n",
    "pl.seed_everything(42)\n",
    "trainer = pl.Trainer(\n",
    "    gpus=1,\n",
    "    # clipping gradients is a hyperparameter and important to prevent divergance\n",
    "    # of the gradient for recurrent neural networks\n",
    "    gradient_clip_val=0.1,\n",
    ")\n",
    "\n",
    "\n",
    "tft = TemporalFusionTransformer.from_dataset(\n",
    "    training,\n",
    "    # not meaningful for finding the learning rate but otherwise very important\n",
    "    learning_rate=0.03,\n",
    "    hidden_size=16,  # most important hyperparameter apart from learning rate\n",
    "    # number of attention heads. Set to up to 4 for large datasets\n",
    "    attention_head_size=1,\n",
    "    dropout=0.1,  # between 0.1 and 0.3 are good values\n",
    "    hidden_continuous_size=8,  # set to <= hidden_size\n",
    "    output_size=1,  # 7 quantiles by default\n",
    "    loss=pytorch_forecasting.metrics.RMSE(),\n",
    "    # reduce learning rate if no improvement in validation loss after x epochs\n",
    "    reduce_on_plateau_patience=4,\n",
    ")\n",
    "print(f\"Number of parameters in network: {tft.size()/1e3:.1f}k\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "70eca4b7",
   "metadata": {},
   "source": [
    "# Use lighting to suggest a suitable learning rate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "a7fa4832",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Global seed set to 42\n",
      "Finding best initial lr:  99%|████████████████▊| 99/100 [00:10<00:00, 10.07it/s]Restoring states from the checkpoint path at /Users/philippebeliveau/I2A2/TFT M1 Challenge /lr_find_temp_model_cddb6533-999e-489a-8c42-280ca66e20bc.ckpt\n",
      "Finding best initial lr: 100%|████████████████| 100/100 [00:10<00:00,  9.13it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "suggested learning rate: 4.5708818961487505e-07\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# find optimal learning rate\n",
    "res = trainer.tuner.lr_find(\n",
    "    tft,\n",
    "    train_dataloader=train_dataloader,\n",
    "    val_dataloaders=val_dataloader,\n",
    "    max_lr=0.1,\n",
    "    min_lr=1e-7,\n",
    ")\n",
    "\n",
    "print(f\"suggested learning rate: {res.suggestion()}\")\n",
    "fig = res.plot(show=True, suggest=True)\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "944f11db",
   "metadata": {},
   "source": [
    "# Callbacks ,Trainer and final Model¶"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "16c77dcf",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: False, used: False\n",
      "TPU available: False, using: 0 TPU cores\n",
      "IPU available: False, using: 0 IPUs\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of parameters in network: 18.1k\n"
     ]
    }
   ],
   "source": [
    "early_stop_callback = EarlyStopping(monitor=\"val_loss\", min_delta=1e-7, patience=10, verbose=False, mode=\"min\")\n",
    "lr_logger = LearningRateMonitor()  \n",
    "logger = TensorBoardLogger(\"lightning_logs\") \n",
    "\n",
    "trainer = pl.Trainer(\n",
    "    max_epochs=30,\n",
    "    gpus=0,\n",
    "    weights_summary=\"top\",\n",
    "    gradient_clip_val=0.1,\n",
    "    limit_train_batches=30,  \n",
    "    callbacks=[lr_logger, early_stop_callback],\n",
    "    logger=logger,\n",
    ")\n",
    "\n",
    "\n",
    "tft = TemporalFusionTransformer.from_dataset(\n",
    "    training,\n",
    "    learning_rate=5e-7,\n",
    "    hidden_size=16,\n",
    "    attention_head_size=1,\n",
    "    dropout=0.1,\n",
    "    hidden_continuous_size=8,\n",
    "    output_size=1, \n",
    "    loss=pytorch_forecasting.metrics.RMSE(),\n",
    "    log_interval=10,  \n",
    "    reduce_on_plateau_patience=4,\n",
    ")\n",
    "print(f\"Number of parameters in network: {tft.size()/1e3:.1f}k\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "934030ff",
   "metadata": {},
   "source": [
    "# Fit the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "a9c7a124",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "   | Name                               | Type                            | Params\n",
      "----------------------------------------------------------------------------------------\n",
      "0  | loss                               | RMSE                            | 0     \n",
      "1  | logging_metrics                    | ModuleList                      | 0     \n",
      "2  | input_embeddings                   | MultiEmbedding                  | 0     \n",
      "3  | prescalers                         | ModuleDict                      | 80    \n",
      "4  | static_variable_selection          | VariableSelectionNetwork        | 1.7 K \n",
      "5  | encoder_variable_selection         | VariableSelectionNetwork        | 1.2 K \n",
      "6  | decoder_variable_selection         | VariableSelectionNetwork        | 1.2 K \n",
      "7  | static_context_variable_selection  | GatedResidualNetwork            | 1.1 K \n",
      "8  | static_context_initial_hidden_lstm | GatedResidualNetwork            | 1.1 K \n",
      "9  | static_context_initial_cell_lstm   | GatedResidualNetwork            | 1.1 K \n",
      "10 | static_context_enrichment          | GatedResidualNetwork            | 1.1 K \n",
      "11 | lstm_encoder                       | LSTM                            | 2.2 K \n",
      "12 | lstm_decoder                       | LSTM                            | 2.2 K \n",
      "13 | post_lstm_gate_encoder             | GatedLinearUnit                 | 544   \n",
      "14 | post_lstm_add_norm_encoder         | AddNorm                         | 32    \n",
      "15 | static_enrichment                  | GatedResidualNetwork            | 1.4 K \n",
      "16 | multihead_attn                     | InterpretableMultiHeadAttention | 1.1 K \n",
      "17 | post_attn_gate_norm                | GateAddNorm                     | 576   \n",
      "18 | pos_wise_ff                        | GatedResidualNetwork            | 1.1 K \n",
      "19 | pre_output_gate_norm               | GateAddNorm                     | 576   \n",
      "20 | output_layer                       | Linear                          | 17    \n",
      "----------------------------------------------------------------------------------------\n",
      "18.1 K    Trainable params\n",
      "0         Non-trainable params\n",
      "18.1 K    Total params\n",
      "0.072     Total estimated model params size (MB)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Validation sanity check:   0%|                            | 0/2 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                                                                "
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Global seed set to 42\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 0:   0%|                                           | 0/33 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 0:  30%|▎| 10/33 [00:01<00:03,  5.80it/s, loss=19.7, v_num=0, train_loss_s"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 0:  61%|▌| 20/33 [00:03<00:02,  6.41it/s, loss=20, v_num=0, train_loss_ste"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 0:  91%|▉| 30/33 [00:04<00:00,  6.64it/s, loss=20.6, v_num=0, train_loss_s\n",
      "Validating: 0it [00:00, ?it/s]\u001b[A\n",
      "Validating:   0%|                                         | 0/3 [00:00<?, ?it/s]\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 0:  97%|▉| 32/33 [00:05<00:00,  5.44it/s, loss=20.6, v_num=0, train_loss_s\u001b[A\n",
      "Epoch 0: 100%|█| 33/33 [00:06<00:00,  5.04it/s, loss=20.6, v_num=0, train_loss_s\u001b[A\n",
      "Epoch 1:   0%| | 0/33 [00:00<?, ?it/s, loss=20.6, v_num=0, train_loss_step=14.00\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1:  30%|▎| 10/33 [00:01<00:03,  6.12it/s, loss=20, v_num=0, train_loss_ste"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1:  61%|▌| 20/33 [00:03<00:02,  6.40it/s, loss=19.6, v_num=0, train_loss_s"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1:  91%|▉| 30/33 [00:04<00:00,  6.69it/s, loss=22.1, v_num=0, train_loss_s\n",
      "Validating: 0it [00:00, ?it/s]\u001b[A\n",
      "Validating:   0%|                                         | 0/3 [00:00<?, ?it/s]\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1:  97%|▉| 32/33 [00:05<00:00,  5.47it/s, loss=22.1, v_num=0, train_loss_s\u001b[A\n",
      "Epoch 1: 100%|█| 33/33 [00:06<00:00,  5.00it/s, loss=22.1, v_num=0, train_loss_s\u001b[A\n",
      "Epoch 2:   0%| | 0/33 [00:00<?, ?it/s, loss=22.1, v_num=0, train_loss_step=20.10\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 2:  30%|▎| 10/33 [00:01<00:03,  6.35it/s, loss=23.3, v_num=0, train_loss_s"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 2:  61%|▌| 20/33 [00:02<00:01,  6.86it/s, loss=22.5, v_num=0, train_loss_s"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 2:  91%|▉| 30/33 [00:04<00:00,  6.73it/s, loss=21.7, v_num=0, train_loss_s\n",
      "Validating: 0it [00:00, ?it/s]\u001b[A\n",
      "Validating:   0%|                                         | 0/3 [00:00<?, ?it/s]\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 2:  97%|▉| 32/33 [00:06<00:00,  5.32it/s, loss=21.7, v_num=0, train_loss_s\u001b[A\n",
      "Epoch 2: 100%|█| 33/33 [00:06<00:00,  4.77it/s, loss=21.7, v_num=0, train_loss_s\u001b[A\n",
      "Epoch 3:   0%| | 0/33 [00:00<?, ?it/s, loss=21.7, v_num=0, train_loss_step=17.60\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 3:  30%|▎| 10/33 [00:01<00:03,  6.55it/s, loss=20.1, v_num=0, train_loss_s"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 3:  61%|▌| 20/33 [00:03<00:02,  6.27it/s, loss=20, v_num=0, train_loss_ste"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 3:  91%|▉| 30/33 [00:04<00:00,  6.66it/s, loss=21.6, v_num=0, train_loss_s\n",
      "Validating: 0it [00:00, ?it/s]\u001b[A\n",
      "Validating:   0%|                                         | 0/3 [00:00<?, ?it/s]\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 3:  97%|▉| 32/33 [00:05<00:00,  5.40it/s, loss=21.6, v_num=0, train_loss_s\u001b[A\n",
      "Epoch 3: 100%|█| 33/33 [00:06<00:00,  4.90it/s, loss=21.6, v_num=0, train_loss_s\u001b[A\n",
      "Epoch 4:   0%| | 0/33 [00:00<?, ?it/s, loss=21.6, v_num=0, train_loss_step=18.40\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 4:  30%|▎| 10/33 [00:01<00:04,  5.46it/s, loss=21.3, v_num=0, train_loss_s"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 4:  61%|▌| 20/33 [00:03<00:02,  6.34it/s, loss=20.6, v_num=0, train_loss_s"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 4:  91%|▉| 30/33 [00:04<00:00,  6.41it/s, loss=22.2, v_num=0, train_loss_s\n",
      "Validating: 0it [00:00, ?it/s]\u001b[A\n",
      "Validating:   0%|                                         | 0/3 [00:00<?, ?it/s]\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 4:  97%|▉| 32/33 [00:05<00:00,  5.37it/s, loss=22.2, v_num=0, train_loss_s\u001b[A\n",
      "Epoch 4: 100%|█| 33/33 [00:06<00:00,  4.85it/s, loss=22.2, v_num=0, train_loss_s\u001b[A\n",
      "Epoch 5:   0%| | 0/33 [00:00<?, ?it/s, loss=22.2, v_num=0, train_loss_step=20.70\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 5:  30%|▎| 10/33 [00:01<00:03,  6.04it/s, loss=22.1, v_num=0, train_loss_s"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 5:  61%|▌| 20/33 [00:03<00:02,  6.29it/s, loss=21.5, v_num=0, train_loss_s"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 5:  91%|▉| 30/33 [00:04<00:00,  6.52it/s, loss=22.1, v_num=0, train_loss_s\n",
      "Validating: 0it [00:00, ?it/s]\u001b[A\n",
      "Validating:   0%|                                         | 0/3 [00:00<?, ?it/s]\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 5:  97%|▉| 32/33 [00:06<00:00,  5.31it/s, loss=22.1, v_num=0, train_loss_s\u001b[A\n",
      "Epoch 5: 100%|█| 33/33 [00:06<00:00,  4.94it/s, loss=22.1, v_num=0, train_loss_s\u001b[A\n",
      "Epoch 6:   0%| | 0/33 [00:00<?, ?it/s, loss=22.1, v_num=0, train_loss_step=19.60\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 6:  30%|▎| 10/33 [00:01<00:03,  7.45it/s, loss=20.4, v_num=0, train_loss_s"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 6:  61%|▌| 20/33 [00:02<00:01,  7.71it/s, loss=20.7, v_num=0, train_loss_s"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 6:  91%|▉| 30/33 [00:04<00:00,  7.44it/s, loss=20.6, v_num=0, train_loss_s\n",
      "Validating: 0it [00:00, ?it/s]\u001b[A\n",
      "Validating:   0%|                                         | 0/3 [00:00<?, ?it/s]\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 6:  97%|▉| 32/33 [00:05<00:00,  6.02it/s, loss=20.6, v_num=0, train_loss_s\u001b[A\n",
      "Epoch 6: 100%|█| 33/33 [00:05<00:00,  5.54it/s, loss=20.6, v_num=0, train_loss_s\u001b[A\n",
      "Epoch 7:   0%| | 0/33 [00:00<?, ?it/s, loss=20.6, v_num=0, train_loss_step=17.70\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 7:  30%|▎| 10/33 [00:01<00:03,  7.54it/s, loss=18.6, v_num=0, train_loss_s"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 7:  61%|▌| 20/33 [00:02<00:01,  7.73it/s, loss=19, v_num=0, train_loss_ste"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 7:  91%|▉| 30/33 [00:03<00:00,  7.83it/s, loss=21.6, v_num=0, train_loss_s\n",
      "Validating: 0it [00:00, ?it/s]\u001b[A\n",
      "Validating:   0%|                                         | 0/3 [00:00<?, ?it/s]\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 7:  97%|▉| 32/33 [00:05<00:00,  6.22it/s, loss=21.6, v_num=0, train_loss_s\u001b[A\n",
      "Epoch 7: 100%|█| 33/33 [00:05<00:00,  5.71it/s, loss=21.6, v_num=0, train_loss_s\u001b[A\n",
      "Epoch 8:   0%| | 0/33 [00:00<?, ?it/s, loss=21.6, v_num=0, train_loss_step=16.00\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 8:  30%|▎| 10/33 [00:01<00:03,  7.64it/s, loss=22.8, v_num=0, train_loss_s"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 8:  61%|▌| 20/33 [00:02<00:01,  7.82it/s, loss=20.8, v_num=0, train_loss_s"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 8:  91%|▉| 30/33 [00:03<00:00,  7.90it/s, loss=20.8, v_num=0, train_loss_s\n",
      "Validating: 0it [00:00, ?it/s]\u001b[A\n",
      "Validating:   0%|                                         | 0/3 [00:00<?, ?it/s]\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 8:  97%|▉| 32/33 [00:05<00:00,  6.26it/s, loss=20.8, v_num=0, train_loss_s\u001b[A\n",
      "Epoch 8: 100%|█| 33/33 [00:05<00:00,  5.75it/s, loss=20.8, v_num=0, train_loss_s\u001b[A\n",
      "Epoch 9:   0%| | 0/33 [00:00<?, ?it/s, loss=20.8, v_num=0, train_loss_step=24.00\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 9:  30%|▎| 10/33 [00:01<00:03,  7.35it/s, loss=21.7, v_num=0, train_loss_s"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 9:  61%|▌| 20/33 [00:02<00:01,  7.73it/s, loss=21, v_num=0, train_loss_ste"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 9:  91%|▉| 30/33 [00:03<00:00,  7.84it/s, loss=20.3, v_num=0, train_loss_s\n",
      "Validating: 0it [00:00, ?it/s]\u001b[A\n",
      "Validating:   0%|                                         | 0/3 [00:00<?, ?it/s]\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 9:  97%|▉| 32/33 [00:05<00:00,  6.22it/s, loss=20.3, v_num=0, train_loss_s\u001b[A\n",
      "Epoch 9: 100%|█| 33/33 [00:05<00:00,  5.70it/s, loss=20.3, v_num=0, train_loss_s\u001b[A\n",
      "Epoch 10:   0%| | 0/33 [00:00<?, ?it/s, loss=20.3, v_num=0, train_loss_step=17.8\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 10:  30%|▎| 10/33 [00:01<00:03,  6.18it/s, loss=21.6, v_num=0, train_loss_"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 10:  61%|▌| 20/33 [00:02<00:01,  6.96it/s, loss=22.4, v_num=0, train_loss_"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 10:  91%|▉| 30/33 [00:04<00:00,  7.32it/s, loss=21.7, v_num=0, train_loss_\n",
      "Validating: 0it [00:00, ?it/s]\u001b[A\n",
      "Validating:   0%|                                         | 0/3 [00:00<?, ?it/s]\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 10:  97%|▉| 32/33 [00:05<00:00,  5.88it/s, loss=21.7, v_num=0, train_loss_\u001b[A\n",
      "Epoch 10: 100%|█| 33/33 [00:06<00:00,  5.42it/s, loss=21.7, v_num=0, train_loss_\u001b[A\n",
      "Epoch 11:   0%| | 0/33 [00:00<?, ?it/s, loss=21.7, v_num=0, train_loss_step=22.0\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 11:  30%|▎| 10/33 [00:01<00:03,  7.35it/s, loss=20.7, v_num=0, train_loss_"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 11:  61%|▌| 20/33 [00:02<00:01,  7.55it/s, loss=20.3, v_num=0, train_loss_"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 11:  91%|▉| 30/33 [00:03<00:00,  7.69it/s, loss=21.5, v_num=0, train_loss_\n",
      "Validating: 0it [00:00, ?it/s]\u001b[A\n",
      "Validating:   0%|                                         | 0/3 [00:00<?, ?it/s]\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 11:  97%|▉| 32/33 [00:05<00:00,  6.16it/s, loss=21.5, v_num=0, train_loss_\u001b[A\n",
      "Epoch 11: 100%|█| 33/33 [00:05<00:00,  5.64it/s, loss=21.5, v_num=0, train_loss_\u001b[A\n",
      "Epoch 12:   0%| | 0/33 [00:00<?, ?it/s, loss=21.5, v_num=0, train_loss_step=20.8\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 12:  30%|▎| 10/33 [00:01<00:03,  7.49it/s, loss=21.6, v_num=0, train_loss_"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 12:  61%|▌| 20/33 [00:02<00:01,  7.74it/s, loss=20.3, v_num=0, train_loss_"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 12:  91%|▉| 30/33 [00:03<00:00,  7.84it/s, loss=20.7, v_num=0, train_loss_\n",
      "Validating: 0it [00:00, ?it/s]\u001b[A\n",
      "Validating:   0%|                                         | 0/3 [00:00<?, ?it/s]\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 12:  97%|▉| 32/33 [00:05<00:00,  5.83it/s, loss=20.7, v_num=0, train_loss_\u001b[A\n",
      "Epoch 12: 100%|█| 33/33 [00:06<00:00,  5.39it/s, loss=20.7, v_num=0, train_loss_\u001b[A\n",
      "Epoch 13:   0%| | 0/33 [00:00<?, ?it/s, loss=20.7, v_num=0, train_loss_step=19.4\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 13:  30%|▎| 10/33 [00:01<00:03,  7.40it/s, loss=21.6, v_num=0, train_loss_"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 13:  61%|▌| 20/33 [00:02<00:01,  7.68it/s, loss=20.8, v_num=0, train_loss_"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 13:  91%|▉| 30/33 [00:03<00:00,  7.74it/s, loss=21.7, v_num=0, train_loss_\n",
      "Validating: 0it [00:00, ?it/s]\u001b[A\n",
      "Validating:   0%|                                         | 0/3 [00:00<?, ?it/s]\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 13:  97%|▉| 32/33 [00:05<00:00,  6.15it/s, loss=21.7, v_num=0, train_loss_\u001b[A\n",
      "Epoch 13: 100%|█| 33/33 [00:05<00:00,  5.65it/s, loss=21.7, v_num=0, train_loss_\u001b[A\n",
      "Epoch 14:   0%| | 0/33 [00:00<?, ?it/s, loss=21.7, v_num=0, train_loss_step=26.4\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 14:  30%|▎| 10/33 [00:01<00:03,  7.17it/s, loss=22.9, v_num=0, train_loss_"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 14:  61%|▌| 20/33 [00:02<00:01,  7.32it/s, loss=23.2, v_num=0, train_loss_"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 14:  91%|▉| 30/33 [00:03<00:00,  7.55it/s, loss=22.1, v_num=0, train_loss_\n",
      "Validating: 0it [00:00, ?it/s]\u001b[A\n",
      "Validating:   0%|                                         | 0/3 [00:00<?, ?it/s]\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 14:  97%|▉| 32/33 [00:05<00:00,  6.04it/s, loss=22.1, v_num=0, train_loss_\u001b[A\n",
      "Epoch 14: 100%|█| 33/33 [00:05<00:00,  5.55it/s, loss=22.1, v_num=0, train_loss_\u001b[A\n",
      "Epoch 15:   0%| | 0/33 [00:00<?, ?it/s, loss=22.1, v_num=0, train_loss_step=23.6\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 15:  30%|▎| 10/33 [00:01<00:04,  5.74it/s, loss=20.7, v_num=0, train_loss_"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 15:  61%|▌| 20/33 [00:02<00:01,  6.70it/s, loss=20.7, v_num=0, train_loss_"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 15:  91%|▉| 30/33 [00:04<00:00,  7.10it/s, loss=20.5, v_num=0, train_loss_\n",
      "Validating: 0it [00:00, ?it/s]\u001b[A\n",
      "Validating:   0%|                                         | 0/3 [00:00<?, ?it/s]\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 15:  97%|▉| 32/33 [00:05<00:00,  5.74it/s, loss=20.5, v_num=0, train_loss_\u001b[A\n",
      "Epoch 15: 100%|█| 33/33 [00:06<00:00,  5.30it/s, loss=20.5, v_num=0, train_loss_\u001b[A\n",
      "Epoch 16:   0%| | 0/33 [00:00<?, ?it/s, loss=20.5, v_num=0, train_loss_step=19.5\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 16:  30%|▎| 10/33 [00:01<00:03,  7.44it/s, loss=19.7, v_num=0, train_loss_"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 16:  61%|▌| 20/33 [00:02<00:01,  7.64it/s, loss=20, v_num=0, train_loss_st"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 16:  91%|▉| 30/33 [00:03<00:00,  7.76it/s, loss=21.5, v_num=0, train_loss_\n",
      "Validating: 0it [00:00, ?it/s]\u001b[A\n",
      "Validating:   0%|                                         | 0/3 [00:00<?, ?it/s]\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 16:  97%|▉| 32/33 [00:05<00:00,  6.18it/s, loss=21.5, v_num=0, train_loss_\u001b[A\n",
      "Epoch 16: 100%|█| 33/33 [00:05<00:00,  5.67it/s, loss=21.5, v_num=0, train_loss_\u001b[A\n",
      "Epoch 17:   0%| | 0/33 [00:00<?, ?it/s, loss=21.5, v_num=0, train_loss_step=23.4\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 17:  30%|▎| 10/33 [00:01<00:03,  7.36it/s, loss=20.8, v_num=0, train_loss_"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 17:  61%|▌| 20/33 [00:02<00:01,  7.69it/s, loss=22.1, v_num=0, train_loss_"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 17:  91%|▉| 30/33 [00:03<00:00,  7.80it/s, loss=22, v_num=0, train_loss_st\n",
      "Validating: 0it [00:00, ?it/s]\u001b[A\n",
      "Validating:   0%|                                         | 0/3 [00:00<?, ?it/s]\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 17:  97%|▉| 32/33 [00:05<00:00,  6.18it/s, loss=22, v_num=0, train_loss_st\u001b[A\n",
      "Epoch 17: 100%|█| 33/33 [00:05<00:00,  5.67it/s, loss=22, v_num=0, train_loss_st\u001b[A\n",
      "Epoch 18:   0%| | 0/33 [00:00<?, ?it/s, loss=22, v_num=0, train_loss_step=14.40,\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 18:  30%|▎| 10/33 [00:01<00:03,  7.40it/s, loss=22.7, v_num=0, train_loss_"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 18:  61%|▌| 20/33 [00:03<00:01,  6.58it/s, loss=22.6, v_num=0, train_loss_"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 18:  91%|▉| 30/33 [00:04<00:00,  6.99it/s, loss=21.4, v_num=0, train_loss_\n",
      "Validating: 0it [00:00, ?it/s]\u001b[A\n",
      "Validating:   0%|                                         | 0/3 [00:00<?, ?it/s]\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 18:  97%|▉| 32/33 [00:05<00:00,  5.69it/s, loss=21.4, v_num=0, train_loss_\u001b[A\n",
      "Epoch 18: 100%|█| 33/33 [00:06<00:00,  5.22it/s, loss=21.4, v_num=0, train_loss_\u001b[A\n",
      "Epoch 19:   0%| | 0/33 [00:00<?, ?it/s, loss=21.4, v_num=0, train_loss_step=24.2\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 19:  30%|▎| 10/33 [00:01<00:03,  7.32it/s, loss=21.7, v_num=0, train_loss_"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 19:  61%|▌| 20/33 [00:02<00:01,  7.65it/s, loss=20.3, v_num=0, train_loss_"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 19:  91%|▉| 30/33 [00:03<00:00,  7.74it/s, loss=20.5, v_num=0, train_loss_\n",
      "Validating: 0it [00:00, ?it/s]\u001b[A\n",
      "Validating:   0%|                                         | 0/3 [00:00<?, ?it/s]\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 19:  97%|▉| 32/33 [00:05<00:00,  6.14it/s, loss=20.5, v_num=0, train_loss_\u001b[A\n",
      "Epoch 19: 100%|█| 33/33 [00:05<00:00,  5.64it/s, loss=20.5, v_num=0, train_loss_\u001b[A\n",
      "Epoch 20:   0%| | 0/33 [00:00<?, ?it/s, loss=20.5, v_num=0, train_loss_step=19.6\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 20:  30%|▎| 10/33 [00:01<00:03,  7.48it/s, loss=20.5, v_num=0, train_loss_"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 20:  61%|▌| 20/33 [00:02<00:01,  7.77it/s, loss=19.9, v_num=0, train_loss_"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 20:  91%|▉| 30/33 [00:03<00:00,  7.82it/s, loss=19.9, v_num=0, train_loss_\n",
      "Validating: 0it [00:00, ?it/s]\u001b[A\n",
      "Validating:   0%|                                         | 0/3 [00:00<?, ?it/s]\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 20:  97%|▉| 32/33 [00:05<00:00,  6.22it/s, loss=19.9, v_num=0, train_loss_\u001b[A\n",
      "Epoch 20: 100%|█| 33/33 [00:05<00:00,  5.70it/s, loss=19.9, v_num=0, train_loss_\u001b[A\n",
      "Epoch 21:   0%| | 0/33 [00:00<?, ?it/s, loss=19.9, v_num=0, train_loss_step=12.5\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 21:  30%|▎| 10/33 [00:01<00:03,  7.28it/s, loss=22, v_num=0, train_loss_st"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 21:  61%|▌| 20/33 [00:02<00:01,  7.62it/s, loss=23.2, v_num=0, train_loss_"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 21:  91%|▉| 30/33 [00:03<00:00,  7.69it/s, loss=21.7, v_num=0, train_loss_\n",
      "Validating: 0it [00:00, ?it/s]\u001b[A\n",
      "Validating:   0%|                                         | 0/3 [00:00<?, ?it/s]\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 21:  97%|▉| 32/33 [00:05<00:00,  5.59it/s, loss=21.7, v_num=0, train_loss_\u001b[A\n",
      "Epoch 21: 100%|█| 33/33 [00:06<00:00,  5.18it/s, loss=21.7, v_num=0, train_loss_\u001b[A\n",
      "Epoch 22:   0%| | 0/33 [00:00<?, ?it/s, loss=21.7, v_num=0, train_loss_step=18.9\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 22:  30%|▎| 10/33 [00:01<00:03,  7.41it/s, loss=19.7, v_num=0, train_loss_"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 22:  61%|▌| 20/33 [00:02<00:01,  7.64it/s, loss=19.4, v_num=0, train_loss_"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 22:  91%|▉| 30/33 [00:03<00:00,  7.78it/s, loss=20.3, v_num=0, train_loss_\n",
      "Validating: 0it [00:00, ?it/s]\u001b[A\n",
      "Validating:   0%|                                         | 0/3 [00:00<?, ?it/s]\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 22:  97%|▉| 32/33 [00:05<00:00,  6.18it/s, loss=20.3, v_num=0, train_loss_\u001b[A\n",
      "Epoch 22: 100%|█| 33/33 [00:05<00:00,  5.67it/s, loss=20.3, v_num=0, train_loss_\u001b[A\n",
      "Epoch 23:   0%| | 0/33 [00:00<?, ?it/s, loss=20.3, v_num=0, train_loss_step=17.0\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 23:  30%|▎| 10/33 [00:01<00:03,  7.40it/s, loss=20.3, v_num=0, train_loss_"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 23:  61%|▌| 20/33 [00:02<00:01,  7.61it/s, loss=20.9, v_num=0, train_loss_"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 23:  91%|▉| 30/33 [00:03<00:00,  7.72it/s, loss=21.3, v_num=0, train_loss_\n",
      "Validating: 0it [00:00, ?it/s]\u001b[A\n",
      "Validating:   0%|                                         | 0/3 [00:00<?, ?it/s]\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 23:  97%|▉| 32/33 [00:05<00:00,  6.17it/s, loss=21.3, v_num=0, train_loss_\u001b[A\n",
      "Epoch 23: 100%|█| 33/33 [00:05<00:00,  5.67it/s, loss=21.3, v_num=0, train_loss_\u001b[A\n",
      "Epoch 24:   0%| | 0/33 [00:00<?, ?it/s, loss=21.3, v_num=0, train_loss_step=22.0\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 24:  30%|▎| 10/33 [00:01<00:03,  7.48it/s, loss=20.2, v_num=0, train_loss_"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 24:  61%|▌| 20/33 [00:02<00:01,  7.59it/s, loss=21.3, v_num=0, train_loss_"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 24:  91%|▉| 30/33 [00:03<00:00,  7.71it/s, loss=22.4, v_num=0, train_loss_\n",
      "Validating: 0it [00:00, ?it/s]\u001b[A\n",
      "Validating:   0%|                                         | 0/3 [00:00<?, ?it/s]\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 24:  97%|▉| 32/33 [00:05<00:00,  6.14it/s, loss=22.4, v_num=0, train_loss_\u001b[A\n",
      "Epoch 24: 100%|█| 33/33 [00:05<00:00,  5.63it/s, loss=22.4, v_num=0, train_loss_\u001b[A\n",
      "Epoch 25:   0%| | 0/33 [00:00<?, ?it/s, loss=22.4, v_num=0, train_loss_step=23.3\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 25:  30%|▎| 10/33 [00:01<00:03,  7.53it/s, loss=21.3, v_num=0, train_loss_"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 25:  61%|▌| 20/33 [00:02<00:01,  7.77it/s, loss=21.2, v_num=0, train_loss_"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 25:  91%|▉| 30/33 [00:03<00:00,  7.82it/s, loss=23, v_num=0, train_loss_st\n",
      "Validating: 0it [00:00, ?it/s]\u001b[A\n",
      "Validating:   0%|                                         | 0/3 [00:00<?, ?it/s]\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 25:  97%|▉| 32/33 [00:05<00:00,  5.59it/s, loss=23, v_num=0, train_loss_st\u001b[A\n",
      "Epoch 25: 100%|█| 33/33 [00:06<00:00,  5.18it/s, loss=23, v_num=0, train_loss_st\u001b[A\n",
      "Epoch 26:   0%| | 0/33 [00:00<?, ?it/s, loss=23, v_num=0, train_loss_step=18.20,\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 26:  30%|▎| 10/33 [00:01<00:03,  7.54it/s, loss=22.9, v_num=0, train_loss_"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 26:  61%|▌| 20/33 [00:02<00:01,  7.75it/s, loss=20.4, v_num=0, train_loss_"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 26:  91%|▉| 30/33 [00:03<00:00,  7.79it/s, loss=20.2, v_num=0, train_loss_\n",
      "Validating: 0it [00:00, ?it/s]\u001b[A\n",
      "Validating:   0%|                                         | 0/3 [00:00<?, ?it/s]\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 26:  97%|▉| 32/33 [00:05<00:00,  6.21it/s, loss=20.2, v_num=0, train_loss_\u001b[A\n",
      "Epoch 26: 100%|█| 33/33 [00:05<00:00,  5.68it/s, loss=20.2, v_num=0, train_loss_\u001b[A\n",
      "Epoch 27:   0%| | 0/33 [00:00<?, ?it/s, loss=20.2, v_num=0, train_loss_step=14.0\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 27:  30%|▎| 10/33 [00:01<00:03,  7.46it/s, loss=19.8, v_num=0, train_loss_"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 27:  61%|▌| 20/33 [00:02<00:01,  7.73it/s, loss=19.8, v_num=0, train_loss_"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 27:  91%|▉| 30/33 [00:03<00:00,  7.84it/s, loss=21, v_num=0, train_loss_st\n",
      "Validating: 0it [00:00, ?it/s]\u001b[A\n",
      "Validating:   0%|                                         | 0/3 [00:00<?, ?it/s]\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 27:  97%|▉| 32/33 [00:05<00:00,  6.26it/s, loss=21, v_num=0, train_loss_st\u001b[A\n",
      "Epoch 27: 100%|█| 33/33 [00:05<00:00,  5.73it/s, loss=21, v_num=0, train_loss_st\u001b[A\n",
      "Epoch 28:   0%| | 0/33 [00:00<?, ?it/s, loss=21, v_num=0, train_loss_step=16.40,\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 28:  30%|▎| 10/33 [00:01<00:03,  7.53it/s, loss=19.7, v_num=0, train_loss_"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 28:  61%|▌| 20/33 [00:02<00:01,  7.73it/s, loss=21.5, v_num=0, train_loss_"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 28:  91%|▉| 30/33 [00:03<00:00,  7.80it/s, loss=22.8, v_num=0, train_loss_\n",
      "Validating: 0it [00:00, ?it/s]\u001b[A\n",
      "Validating:   0%|                                         | 0/3 [00:00<?, ?it/s]\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 28:  97%|▉| 32/33 [00:05<00:00,  6.13it/s, loss=22.8, v_num=0, train_loss_\u001b[A\n",
      "Epoch 28: 100%|█| 33/33 [00:05<00:00,  5.61it/s, loss=22.8, v_num=0, train_loss_\u001b[A\n",
      "Epoch 29:   0%| | 0/33 [00:00<?, ?it/s, loss=22.8, v_num=0, train_loss_step=17.8\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 29:  30%|▎| 10/33 [00:01<00:03,  7.41it/s, loss=22.9, v_num=0, train_loss_"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 29:  61%|▌| 20/33 [00:02<00:01,  7.70it/s, loss=23.2, v_num=0, train_loss_"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 29:  91%|▉| 30/33 [00:03<00:00,  7.79it/s, loss=21.2, v_num=0, train_loss_\n",
      "Validating: 0it [00:00, ?it/s]\u001b[A\n",
      "Validating:   0%|                                         | 0/3 [00:00<?, ?it/s]\u001b[A"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 29:  97%|▉| 32/33 [00:05<00:00,  6.23it/s, loss=21.2, v_num=0, train_loss_\u001b[A\n",
      "Epoch 29: 100%|█| 33/33 [00:05<00:00,  5.69it/s, loss=21.2, v_num=0, train_loss_\u001b[A\n",
      "Epoch 29: 100%|█| 33/33 [00:06<00:00,  4.80it/s, loss=21.2, v_num=0, train_loss_\u001b[A\n"
     ]
    }
   ],
   "source": [
    "# fit network\n",
    "trainer.fit(\n",
    "    tft,\n",
    "    train_dataloader=train_dataloader,\n",
    "    val_dataloaders=val_dataloader,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e879c0bc",
   "metadata": {},
   "source": [
    "# Load the best model from Lightning checkpoint¶"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "d35c01be",
   "metadata": {},
   "outputs": [],
   "source": [
    "# load the best model according to the validation loss\n",
    "# (given that we use early stopping, this is not necessarily the last epoch)\n",
    "best_model_path = trainer.checkpoint_callback.best_model_path\n",
    "best_tft = TemporalFusionTransformer.load_from_checkpoint(best_model_path)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fda0928d",
   "metadata": {},
   "source": [
    "# Get the validation RMSE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "25b112ec",
   "metadata": {},
   "outputs": [],
   "source": [
    "# calcualte root mean squared error on validation set\n",
    "actuals = torch.cat([y[0] for x, y in iter(val_dataloader)])\n",
    "val_predictions = best_tft.predict(val_dataloader)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "1ef8b123",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(28.8971)"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "criterion = nn.MSELoss()\n",
    "torch.sqrt(criterion(actuals,val_predictions))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "985e5a00",
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# I have to change change the scale of the actuals, or revert back the predictions to normal scale\n",
    "\n",
    "plt.figure(figsize=(15, 10))\n",
    "plt.plot(val_predictions, label='Predictions')\n",
    "plt.plot(actuals, label='Actual', alpha=0.2)\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "34dd2a69",
   "metadata": {},
   "source": [
    "# Predict on the test data¶"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "9d0ad0ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "pred,x=best_tft.predict(submission_dataloader,return_x=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "28aa0e1f",
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "'QTT_week'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m~/anaconda3/envs/Pythorch/lib/python3.8/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3620\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3621\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3622\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/Pythorch/lib/python3.8/site-packages/pandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/Pythorch/lib/python3.8/site-packages/pandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'QTT_week'",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m/var/folders/dk/39_21_r51vg7j_fkt5p1mh5r0000gn/T/ipykernel_2110/1240383490.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# encoder_data = df_train[lambda x: x.date_block_num > x.date_block_num.max() - max_encoder_length]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;31m# new_prediction_data = pd.concat([encoder_data, decoder_data], ignore_index=True)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0mpred\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbest_tft\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf_submission\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mreturn_x\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m~/anaconda3/envs/Pythorch/lib/python3.8/site-packages/pytorch_forecasting/models/base_model.py\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, data, mode, return_index, return_decoder_lengths, batch_size, num_workers, fast_dev_run, show_progress_bar, return_x, mode_kwargs, **kwargs)\u001b[0m\n\u001b[1;32m   1109\u001b[0m         \u001b[0;31m# convert to dataloader\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1110\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1111\u001b[0;31m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTimeSeriesDataSet\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfrom_parameters\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset_parameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpredict\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1112\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTimeSeriesDataSet\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1113\u001b[0m             \u001b[0mdataloader\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_dataloader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbatch_size\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum_workers\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnum_workers\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/Pythorch/lib/python3.8/site-packages/pytorch_forecasting/data/timeseries.py\u001b[0m in \u001b[0;36mfrom_parameters\u001b[0;34m(cls, parameters, data, stop_randomization, predict, **update_kwargs)\u001b[0m\n\u001b[1;32m   1156\u001b[0m         \u001b[0mparameters\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mupdate_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1157\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1158\u001b[0;31m         \u001b[0mnew\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcls\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1159\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mnew\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1160\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/Pythorch/lib/python3.8/site-packages/pytorch_forecasting/data/timeseries.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, data, time_idx, target, group_ids, weight, max_encoder_length, min_encoder_length, min_prediction_idx, min_prediction_length, max_prediction_length, static_categoricals, static_reals, time_varying_known_categoricals, time_varying_known_reals, time_varying_unknown_categoricals, time_varying_unknown_reals, variable_groups, constant_fill_strategy, allow_missing_timesteps, lags, add_relative_time_idx, add_target_scales, add_encoder_length, target_normalizer, categorical_encoders, scalers, randomize_length, predict_mode)\u001b[0m\n\u001b[1;32m    432\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    433\u001b[0m         \u001b[0;31m# preprocess data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 434\u001b[0;31m         \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_preprocess_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    435\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mtarget\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtarget_names\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    436\u001b[0m             \u001b[0;32massert\u001b[0m \u001b[0mtarget\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscalers\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"Target normalizer is separate and not in scalers.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/Pythorch/lib/python3.8/site-packages/pytorch_forecasting/data/timeseries.py\u001b[0m in \u001b[0;36m_preprocess_data\u001b[0;34m(self, data)\u001b[0m\n\u001b[1;32m    699\u001b[0m                 \u001b[0;34mf\"__target__{target}\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    700\u001b[0m             ), f\"__target__{target} is a protected column and must not be present in data\"\n\u001b[0;32m--> 701\u001b[0;31m             \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34mf\"__target__{target}\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtarget\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    702\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mweight\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    703\u001b[0m             \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"__weight__\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mweight\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/Pythorch/lib/python3.8/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3503\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3504\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3505\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3506\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3507\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/Pythorch/lib/python3.8/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3621\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3622\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3623\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3624\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3625\u001b[0m                 \u001b[0;31m# If we have a listlike key, _check_indexing_error will raise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'QTT_week'"
     ]
    }
   ],
   "source": [
    "df_test=df_submission.drop(['QTT'],axis=1)\n",
    "df_test['date_block_num']=34\n",
    "df_test['QTT']=0\n",
    "# decoder_data=df_test\n",
    "# encoder_data = df_train[lambda x: x.date_block_num > x.date_block_num.max() - max_encoder_length]\n",
    "# new_prediction_data = pd.concat([encoder_data, decoder_data], ignore_index=True)\n",
    "pred,x=best_tft.predict(submission_dataloader,return_x=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "c62b37b4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7fbdf4f3a1c0>]"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "defea0b6",
   "metadata": {},
   "source": [
    "# Question \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e3d18f9",
   "metadata": {},
   "source": [
    "- I don't think the date_num_block is okay, I believe I am taking out information \n",
    "- I need to rescale the predictions back to it's original value \n",
    "- How to compute the RMSE with scale and not scale value?? This doesn't make sense\n",
    "- Need to plot the results \n",
    "- Don't understand the date_block_num from item count ot date count. How does it aggregate? It seems to aggregate weekly, although we are losing the totality of the combination of item. "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
